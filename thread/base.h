









































































































#include <sys/ppu_thread.h>





















































namespace rw
{
    namespace core
    {
        namespace thread
        {










            enum Scheduling
            {
                kSchedulingFIFO = 1,
                kSchedulingRR = 2,
                kSchedulingSporadic = 4,
                kSchedulingTS = 8,
                kSchedulingCoop = 16
            };


























                        typedef sys_ppu_thread_t ThreadId;













            const ThreadId kThreadIdInvalid = ThreadId(0);




            const ThreadId kThreadIdCurrent = ThreadId(0x7fffffff);




            const ThreadId kThreadIdAny = ThreadId(0x7fffffff - 1);



























































































































































































            typedef double ThreadTime;




            const ThreadTime kTimeoutImmediate = 0;




            const ThreadTime kTimeoutNone = (0x7fffffff * 2U + 1);














































            const int kThreadPriorityUnknown = (-0x7fffffff - 1);





            const int kThreadPriorityMin = -128;




            const int kThreadPriorityDefault = 0;





            const int kThreadPriorityMax = 127;









            const int kSysThreadPriorityDefault = 1001;



















            ThreadId GetThreadId();












            int GetThreadPriority();













            bool SetThreadPriority(int nPriority);









            const int kProcessorDefault = -1;





            const int kProcessorAny = -2;












            void SetThreadProcessor(int nProcessor);
















            void ThreadSleep(const ThreadTime& timeRelative = kTimeoutImmediate);






















            void ThreadEnd(intptr_t threadReturnValue);











            ThreadTime GetThreadTime();






            inline ThreadTime ConvertRelativeTime(const ThreadTime& timeRelative)
            {
                ;
                return GetThreadTime() + timeRelative;
            }










            uint32_t FNVStringHash(const char* str);


        }
    }
}
